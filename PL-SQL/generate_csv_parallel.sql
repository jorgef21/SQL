CREATE OR REPLACE PROCEDURE ODSMGR.GENERATE_CSV_PARALLEL(START_ID IN NUMERIC,END_ID IN NUMERIC, TABLE_NAME IN VARCHAR,TABLE_CATEGORY IN VARCHAR) AS
/*
THIS PROCEDURE WILL TAKE 3 PARAMENTERS TO EXECUTE DIFFERENT INSTANCES OF THE PROCEDURE CSV.GENERATE. EACH INSTANCE WILL
TAKE DIFFERENT START_ID END_ID IN ORDER TO PROCESS THE FILES AT THE SAME TIME.

THIS TASK WILL BE EXECUTE BY ANOTHER PROCEDURE WHERE WE'LL DEFINE THE WAY TO SPLIT A TABLE BY CHUNKS.
SAME REPO - CSG_PARALLEL_PROCESSING.SQL

REQ:
FILE_NAME -> FILE NAME FOR THE OUTPUT
START_ID -> START ID SENT BY CSV_PARALLEL_PROCESSING
END_ID -> END ID SENT BY CSV_PARALLEL_PROCESSING

TABLE_NAME -> TABLE NAME TO PROCESS
TABLE_CATEGORY -> TO IDENTIFY PROCESS
We are also using a procedure to track the files bein genereated, this is optionall 
INSERT_FILE_NAME -> only inserts file_name and timestamp to a table.

*/
FILE_NAME VARCHAR2(500);
DIRECTORY VARCHAR(255);
QUERY VARCHAR2(4000);
BEGIN 
    FILE_NAME := TABLE_NAME||'_'||START_ID||'_'||TO_CHAR(SYSDATE,'YYMMDDHH24MISS')||'.csv';
    DIRECTORY :='SNOWFLAKE';
    QUERY :='SELECT A.* FROM (SELECT A.*,ROWNUM RN FROM '||TABLE_NAME||' A'||') A WHERE A.RN BETWEEN '||START_ID|| ' AND ' ||END_ID;
    CSV.GENERATE (DIRECTORY,FILE_NAME,p_query => QUERY);
    INSERT_FILE_NAME(FILE_NAME,TABLE_CATEGORY);
END;